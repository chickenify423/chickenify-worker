# --- Step 1: make folder structure ---
mkdir -p templates static
# --- Step 2: create requirements.txt ---
cat > requirements.txt <<'EOF'
fastapi==0.114.2
uvicorn==0.30.6
jinja2==3.1.4
python-multipart==0.0.9
sqlmodel==0.0.21
bcrypt==4.2.0
itsdangerous==2.2.0
boto3==1.34.162
httpx==0.27.2
EOF

# --- Step 3: create models.py ---
cat > models.py <<'EOF'
from datetime import datetime
from typing import Optional
from sqlmodel import SQLModel, Field

class User(SQLModel, table=True):
    id: int | None = Field(default=None, primary_key=True)
    email: str = Field(index=True, unique=True)
    password_hash: str
    role: str = Field(default="user")
    is_active: bool = Field(default=True)
    created_at: datetime = Field(default_factory=datetime.utcnow)

class Job(SQLModel, table=True):
    id: int | None = Field(default=None, primary_key=True)
    user_id: int = Field(index=True)
    status: str = Field(default="queued")
    input_filename: str
    input_duration_sec: float | None = None
    output_s3_url: Optional[str] = None
    error_message: Optional[str] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    completed_at: Optional[datetime] = None
EOF

# --- Step 4: create auth.py ---
cat > auth.py <<'EOF'
import bcrypt, itsdangerous, os
from fastapi import Request
from sqlmodel import Session, select
from models import User

SECRET = os.environ.get("APP_SECRET", "change-me-please")
signer = itsdangerous.TimestampSigner(SECRET)

def hash_pw(pw: str) -> str:
    return bcrypt.hashpw(pw.encode(), bcrypt.gensalt()).decode()

def check_pw(pw: str, pw_hash: str) -> bool:
    return bcrypt.checkpw(pw.encode(), pw_hash.encode())

def set_session(response, user_id: int):
    token = signer.sign(str(user_id)).decode()
    response.set_cookie("session", token, httponly=True, samesite="lax", secure=True)

def get_current_user(request: Request, db: Session) -> User | None:
    token = request.cookies.get("session")
    if not token: return None
    try:
        raw = signer.unsign(token, max_age=60*60*24*30).decode()
        uid = int(raw)
    except Exception:
        return None
    user = db.exec(select(User).where(User.id == uid)).first()
    return user if (user and user.is_active) else None

def clear_session(response):
    response.delete_cookie("session")
EOF

# --- Step 5: create s3utils.py ---
cat > s3utils.py <<'EOF'
import os, boto3
S3_BUCKET = os.getenv("S3_BUCKET")
S3_REGION = os.getenv("S3_REGION")
S3_KEY = os.getenv("S3_KEY")
S3_SECRET = os.getenv("S3_SECRET")

s3 = boto3.client("s3",
    region_name=S3_REGION,
    aws_access_key_id=S3_KEY,
    aws_secret_access_key=S3_SECRET)

def put_input_bytes(user_id: int, job_id: int, content: bytes) -> str:
    key = f"inputs/{user_id}/{job_id}.wav"
    s3.put_object(Bucket=S3_BUCKET, Key=key, Body=content, ContentType="audio/wav")
    return key

def output_url(key: str) -> str:
    return f"https://{S3_BUCKET}.s3.{S3_REGION}.amazonaws.com/{key}"
EOF

# --- Step 6: create templates/base.html ---
cat > templates/base.html <<'EOF'
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>{{ title or "Chicken Singer" }}</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
<header class="wrap">
  <h1>üêî Chicken Singer</h1>
  <nav>
    {% if user %}
      <span>Hi, {{ user.email }}</span>
      <form action="/logout" method="post" style="display:inline"><button>Logout</button></form>
      {% if user.role == "admin" %}<a href="/admin/users">Admin</a>{% endif %}
    {% else %}
      <a href="/login">Login</a>
    {% endif %}
  </nav>
</header>
<main class="wrap">{% block content %}{% endblock %}</main>
<footer class="wrap muted">¬© Chickenify</footer>
</body>
</html>
EOF

# --- Step 7: create templates/login.html ---
cat > templates/login.html <<'EOF'
{% extends "base.html" %}
{% block content %}
<h2>Login</h2>
<form method="post" action="/login" class="card">
  {% if error %}<div class="error">{{ error }}</div>{% endif %}
  <label>Email</label>
  <input name="email" type="email" required>
  <label>Password</label>
  <input name="password" type="password" required>
  <button type="submit">Login</button>
</form>
{% endblock %}
EOF

# --- Step 8: create templates/index.html ---
cat > templates/index.html <<'EOF'
{% extends "base.html" %}
{% block content %}
{% if not user %}
<p>Please <a href="/login">log in</a> to make the chicken sing.</p>
{% else %}
<section class="card">
  <h2>Make the Chicken Sing</h2>
  <form action="/jobs" method="post" enctype="multipart/form-data">
    <label>Song (mp3/wav, ‚â§45 s)</label>
    <input type="file" name="song" accept=".mp3,.wav" required>
    <button type="submit">Process</button>
  </form>
</section>

<section class="card">
  <h2>My Chicken Songs</h2>
  {% if jobs %}
    <table class="list">
      <tr><th>ID</th><th>Status</th><th>File</th><th>Length</th><th>Output</th><th>When</th></tr>
      {% for j in jobs %}
      <tr>
        <td>#{{ j.id }}</td>
        <td>{{ j.status }}</td>
        <td>{{ j.input_filename }}</td>
        <td>{{ "%.1fs"|format(j.input_duration_sec or 0) }}</td>
        <td>
          {% if j.output_s3_url %}
            <a href="{{ j.output_s3_url }}" target="_blank">download</a>
          {% elif j.error_message %}
            <span class="muted">{{ j.error_message }}</span>
          {% else %}<span class="muted">‚Äî</span>{% endif %}
        </td>
        <td>{{ j.created_at.strftime("%Y-%m-%d %H:%M") }}</td>
      </tr>
      {% endfor %}
    </table>
  {% else %}
    <p class="muted">No jobs yet.</p>
  {% endif %}
</section>
{% endif %}
{% endblock %}
EOF

# --- Step 9: create templates/admin_users.html ---
cat > templates/admin_users.html <<'EOF'
{% extends "base.html" %}
{% block content %}
<h2>Users</h2>
<section class="card">
  <form action="/admin/users" method="post" class="row">
    <div><label>Email</label><input name="email" type="email" required></div>
    <div><label>Password</label><input name="password" type="text" required></div>
    <div>
      <label>Role</label>
      <select name="role"><option value="user">user</option><option value="admin">admin</option></select>
    </div>
    <button type="submit">Create</button>
  </form>
</section>

<section class="card">
  <table class="list">
    <tr><th>ID</th><th>Email</th><th>Role</th><th>Active</th><th>Created</th></tr>
    {% for u in users %}
      <tr>
        <td>{{ u.id }}</td><td>{{ u.email }}</td><td>{{ u.role }}</td>
        <td>{{ "yes" if u.is_active else "no" }}</td>
        <td>{{ u.created_at.strftime("%Y-%m-%d %H:%M") }}</td>
      </tr>
    {% endfor %}
  </table>
</section>
{% endblock %}
EOF

# --- Step 10: create static/style.css ---
cat > static/style.css <<'EOF'
body{font-family:system-ui,Arial,sans-serif;margin:0;color:#111;}
.wrap{max-width:900px;margin:0 auto;padding:18px;}
header{display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid #eee;}
.card{border:1px solid #e6e6e6;border-radius:12px;padding:16px;margin:16px 0;}
label{display:block;font-weight:600;margin:8px 0 4px;}
input,select{padding:10px;width:100%;max-width:360px;}
button{padding:10px 16px;border-radius:10px;border:1px solid #222;background:#fff;cursor:pointer;}
nav a,nav span{margin-left:12px;}
.error{color:#b00020;margin-bottom:10px;}
.muted{color:#666;}
table.list{width:100%;border-collapse:collapse;}
table.list th,table.list td{padding:8px;border-bottom:1px solid #eee;text-align:left;}
.row{display:flex;gap:12px;align-items:flex-end;flex-wrap:wrap;}
EOF

# --- Step 11: create main.py (app logic) ---
cat > main.py <<'EOF'
import os, io, uuid, datetime as dt
from fastapi import FastAPI, Request, Form, UploadFile, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlmodel import SQLModel, Session, create_engine, select
from models import User, Job
from auth import hash_pw, check_pw, set_session, clear_session, get_current_user
from s3utils import put_input_bytes
import httpx

APP_SECRET = os.getenv("APP_SECRET", "change-me")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./app.db")
WORKER_URL = os.getenv("WORKER_URL", "")
WORKER_API_KEY = os.getenv("WORKER_API_KEY", "")

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False} if DATABASE_URL.startswith("sqlite") else {})
SQLModel.metadata.create_all(engine)

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

def db_sess():
    with Session(engine) as s:
        yield s

@app.get("/", response_class=HTMLResponse)
def home(request: Request, db: Session = Depends(db_sess)):
    user = get_current_user(request, db)
    jobs = []
    if user:
        jobs = db.exec(select(Job).where(Job.user_id==user.id).order_by(Job.id.desc())).all()
    return templates.TemplateResponse("index.html", {"request": request, "user": user, "jobs": jobs})

@app.get("/login", response_class=HTMLResponse)
def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request, "error": None})

@app.post("/login")
def login(request: Request, db: Session = Depends(db_sess), email: str = Form(...), password: str = Form(...)):
    user = db.exec(select(User).where(User.email == email)).first()
    if not user or not user.is_active or not check_pw(password, user.password_hash):
        return templates.TemplateResponse("login.html", {"request": request, "error": "Invalid credentials"})
    resp = RedirectResponse("/", status_code=302)
    set_session(resp, user.id)
    return resp

@app.post("/logout")
def logout():
    resp = RedirectResponse("/", status_code=302)
    clear_session(resp)
    return resp

def require_admin(request: Request, db: Session) -> User:
    user = get_current_user(request, db)
    if not user or user.role != "admin":
        raise RedirectResponse("/", status_code=302)
    return user

@app.get("/admin/users", response_class=HTMLResponse)
def admin_users(request: Request, db: Session = Depends(db_sess)):
    admin = require_admin(request, db)
    users = db.exec(select(User).order_by(User.id.desc())).all()
    return templates.TemplateResponse("admin_users.html", {"request": request, "user": admin, "users": users})

@app.post("/admin/users")
def admin_create_user(request: Request, db: Session = Depends(db_sess),
                      email: str = Form(...), password: str = Form(...), role: str = Form("user")):
    admin = require_admin(request, db)
    if db.exec(select(User).where(User.email == email)).first():
        return RedirectResponse("/admin/users?err=exists", status_code=302)
    u = User(email=email, password_hash=hash_pw(password), role=role, is_active=True)
    db.add(u); db.commit()
    return RedirectResponse("/admin/users?ok=1", status_code=302)

@app.post("/jobs")
async def create_job(request: Request, db: Session = Depends(db_sess), song: UploadFile = None):
    user = get_current_user(request, db)
    if not user:
        return RedirectResponse("/login", status_code=302)
    if not song or (song.content_type not in ("audio/mpeg","audio/wav","audio/x-wav")):
        return RedirectResponse("/?err=badfile", status_code=302)
    job = Job(user_id=user.id, status="queued", input_filename=song.filename)
    db.add(job); db.commit(); db.refresh(job)
    headers = {"X-API-Key": WORKER_API_KEY}
    file_bytes = await song.read()
    data = {"job_id": str(job.id),"user_id": str(user.id),"s3_prefix": f"outputs/{user.id}/{job.id}.wav"}
    files = {"audio": (song.filename, file_bytes, song.content_type)}
    async with httpx.AsyncClient(timeout=300) as client:
        try:
            r = await client.post(f"{WORKER_URL}/infer", headers=headers, data=data, files=files)
            if r.status_code != 200:
                job.status="error"; job.error_message=f"Worker {r.status_code}"
            else:
                p=r.json()
                if p.get("ok"):
                    job.status="done"; job.output_s3_url=p["output_s3_url"]
                    job.input_duration_sec=float(p.get("duration_sec") or 0)
                    job.completed_at=dt.datetime.utcnow()
                else:
                    job.status="error"; job.error_message=p.get("error","unknown")
        except Exception as e:
            job.status="error"; job.error_message=str(e)
        finally:
            db.add(job); db.commit()
    return RedirectResponse("/", status_code=302)
EOF

# --- Step 12: install everything ---
pip install -r requirements.txt
echo "‚úÖ Files created.  Run the server with:
uvicorn main:app --host 0.0.0.0 --port 8000"